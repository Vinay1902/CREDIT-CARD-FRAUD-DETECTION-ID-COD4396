# CREDIT-CARD-FRAUD-DETECTION-ID-COD4396
//Build a machine learning model to identify fraudulent credit card
transactions. . Preprocess and normalize the transaction data,
handle class imbalance issues, and split the dataset into training
and testing sets. .Train a classification algorithm, such as
logistic regression or random forests, to classify transactions as
fraudulent or genuine.Evaluate the model's performance using
metrics like precision, recall, and F1-score, and consider
techniques like oversampling or under sampling for improving
result.Additionally, Imagine you've been tasked with creating
comprehensive documentation for a CREDIT CARD FRAUD DETECTION
project.Your documentation should include detailed explanations of
the code along with images illustrating the program's execution
and user interactions.



# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Step 1: Load the dataset
data = pd.read_csv('credit_card_transactions.csv')

# Step 2: Data Preprocessing
# 2.1 Data Cleaning
# Assuming data cleaning steps have already been performed

# 2.2 Feature Engineering
# Normalize transaction amount
scaler = StandardScaler()
data['normalized_amount'] = scaler.fit_transform(data['Amount'].values.reshape(-1,1))
data.drop(['Time', 'Amount'], axis=1, inplace=True)

# 2.3 Handling Class Imbalance
# Explore class distribution
print("Class Distribution:")
print(data['Class'].value_counts())

# Perform oversampling using SMOTE
X = data.drop('Class', axis=1)
y = data['Class']
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Step 3: Splitting the Dataset
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Step 4: Model Training
# Train logistic regression model
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

# Train random forest classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Step 5: Model Evaluation
# Evaluate logistic regression model
lr_y_pred = lr_model.predict(X_test)
print("\nLogistic Regression Classification Report:")
print(classification_report(y_test, lr_y_pred))
print("\nLogistic Regression Confusion Matrix:")
print(confusion_matrix(y_test, lr_y_pred))

# Evaluate random forest classifier
rf_y_pred = rf_model.predict(X_test)
print("\nRandom Forest Classification Report:")
print(classification_report(y_test, rf_y_pred))
print("\nRandom Forest Confusion Matrix:")
print(confusion_matrix(y_test, rf_y_pred))

# Step 6: Visualization (Optional)
# Plot confusion matrix for logistic regression model
plt.figure(figsize=(8, 6))
cm_lr = confusion_matrix(y_test, lr_y_pred)
plt.title('Logistic Regression Confusion Matrix')
sns.heatmap(cm_lr, annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Plot confusion matrix for random forest classifier
plt.figure(figsize=(8, 6))
cm_rf = confusion_matrix(y_test, rf_y_pred)
plt.title('Random Forest Confusion Matrix')
sns.heatmap(cm_rf, annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
